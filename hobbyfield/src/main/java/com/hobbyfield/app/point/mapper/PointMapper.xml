<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hobbyfield.app.point.mapper.PointMapper">

	<!-- 포인트 상품 전체조회 -->
	<select id="selectPointAllList" resultType="PointVO">
		SELECT *
		FROM POINT
		ORDER BY
		point_endterm asc
	</select>

	<!-- 포인트 상품 단건조회 -->
	<select id="selectPointInfo" resultType="PointVO">
		SELECT
				point_id,
				point_name,
				point_content,
				point_item_type,
				point_state,
				FIND_CODE_NM(point_state) point_state_nm,
				point_view,
				point_regdate,
				point_endterm,
				point_img_name,
				point_img_path,
				group_price
		FROM 	POINT
		WHERE point_id = #{pointId}

	</select>

	<!-- 포인트 옵션 단건조회 --> 
	<select id="selectPointOptInfo" resultType="PointOptionVO">
		SELECT
				point_opt_id,
				point_id,
				point_period,
				point_price
		FROM 	POINT_OPTION
		WHERE 	point_id = #{pointId}
	</select>

 	<!-- 이모지 단건조회 -->
 	<select id="selectEmojiInfo" resultType="EmojiVO">
		SELECT 
				emoji_id,
				emoji_img_name,
				emoji_img_path,
				emoji_name,
				point_id
		FROM	EMOJI
		WHERE 	point_id = #{pointId}
	</select>
	<!-- 포인트 상품등록 -->
	<insert id="insertPoint" parameterType="PointVO">
		<selectKey keyProperty="pointId" resultType="int"
			order="BEFORE">
			SELECT NVL(MAX(point_id), 0) + 1
			FROM point
		</selectKey>
		INSERT INTO point(
					point_id,
					point_name,
					point_content,
					point_item_type,
					point_state,
					point_regdate,
					<if test="pointItemType.equals('W1')">
					point_endterm,
					</if>
					point_img_name,
					point_img_path,
					point_view,
					group_price
		) VALUES (
					#{pointId},
					#{pointName},
					#{pointContent},
					#{pointItemType},
					'V1',
						SYSDATE,
					<if test="pointItemType.equals('W1')">
					#{pointEndterm},
					</if>
					
					#{pointImgName},
					#{pointImgPath},
					#{pointView},
					#{groupPrice}
		)
	</insert>
	<!-- POINT_OPT_ID -->
	<!-- POINT_ID -->
	<!-- POINT_PERIOD -->


	<!-- 포인트 상품 옵션 -->
	<insert id="insertPointOption" parameterType="PointOptionVO">
		<selectKey keyProperty="pointOptId" resultType="int"
			order="BEFORE">
			SELECT NVL(MAX(point_opt_id), 0) + 1
			FROM POINT_OPTION
		</selectKey>
		INSERT INTO POINT_OPTION(
		point_id,
		point_opt_id,
		point_period,
		point_price
		)VALUES(
		#{pointId},
		#{pointOptId},
		#{pointPeriod},
		#{pointPrice}
		)
	</insert>


	<!-- 포인트 이모티콘 -->
	<insert id="insertEmoji" parameterType="EmojiVO">
		<selectKey keyProperty="emojiId" resultType="int"
			order="BEFORE">
			SELECT NVL(MAX(emoji_id), 0) + 1
			FROM EMOJI
		</selectKey>
		INSERT INTO EMOJI(
		point_id,
		emoji_id,
		emoji_name,
		emoji_img_name,
		emoji_img_path
		)VALUES(
		#{pointId},
		#{emojiId},
		#{emojiName},
		#{emojiImgName},
		#{emojiImgPath}
		)
	</insert>


	<!-- 포인트 상품 수정 -->
	<update id="updatePoint" parameterType="PointVO">
		UPDATE point
		<set>
			<if test="pointName != null">
				point_name = #{pointName},
			</if>
			<if test="pointContent != null">
				point_content = #{pointContent},
			</if>
			<if test="pointRegdate != null">
				point_regdate = SYSDATE,
			</if>
			<if test="pointEndterm != null">
				point_endterm = #{pointEndterm},
			</if>
			<if test="pointImgName != null">
				point_img_name = #{pointImgName},
			</if>
			<if test="pointImgPath != null">
				point_img_path = #{pointImgPath}
			</if>
		</set>
		WHERE point_id = #{pointId}
	</update>



	<!-- 포인트 상품 삭제 -->
	<delete id="deletePoint" parameterType="int">
		DELETE FROM point
		WHERE
		point_id = #{pointId}
	</delete>

 	<!-- 포인트 옵션 삭제 -->
<!-- 	<delete id="deletePointOption" parameterType="int"> -->
<!-- 		DELETE FROM POINT -->
<!-- 		WHERE point_id in( -->
<!-- 							SELECT point_id  -->
<!-- 							FROM point_option o -->
<!-- 							 WHERE NOT EXISTS ( -->
<!-- 												SELECT point_id -->
<!-- 												FROM point -->
<!-- 												WHERE o.point_id = #{pointId}) -->
<!-- 							) -->
<!-- 	</delete> -->

	<!-- 조회수 업데이트 -->
	<update id="updatePointView" parameterType="PointVO">
		UPDATE point
		SET
		point_view = point_view + 1
		WHERE point_id = #{pointId}
	</update>

	



</mapper>
